from array import array
from collections import abc
from typing import Any, BinaryIO, Dict, Iterable, Iterator, List, Optional, Tuple, Type, TypeVar, Union, overload


class NbtError(Exception): ...

class NbtUnpackError(NbtError): ...

class NbtInvalidOperation(NbtError): ...


T = TypeVar('T', bound='Tag')

class Tag:
    tagid: int = ...

    def __init__(self) -> None: ...

    def __eq__(self: T, other: T) -> bool: ...

    __hash__ = None
    
    @property
    def value(self) -> Any: ...

    @value.setter
    def value(self, new_value: Any) -> None: ...
    
    @classmethod
    def read(cls: Type[T], stream: BinaryIO) -> T: ...
    
    def write(self, stream: BinaryIO) -> None: ...

    @classmethod
    def from_bytes(cls: Type[T], bytes: bytes) -> T: ...

    def to_bytes(self) -> bytes: ...


class _TagNumber(Tag):
    def __init__(self, value: int = 0) -> None: ...

    def __int__(self) -> int: ...

    def __float__(self) -> float: ...


class TagByte(_TagNumber):
    tagid: int = ...

    @property
    def value(self) -> int: ...

    @value.setter
    def value(self, new_value: int) -> None: ...


class TagShort(_TagNumber):
    tagid: int = ...

    @property
    def value(self) -> int: ...

    @value.setter
    def value(self, new_value: int) -> None: ...


class TagInt(_TagNumber):
    tagid: int = ...

    @property
    def value(self) -> int: ...

    @value.setter
    def value(self, new_value: int) -> None: ...


class TagLong(_TagNumber):
    tagid: int = ...

    @property
    def value(self) -> int: ...

    @value.setter
    def value(self, new_value: int) -> None: ...


class TagDouble(_TagNumber):
    tagid: int = ...

    def __init__(self, value: float = 0.0) -> None: ...

    @property
    def value(self) -> float: ...

    @value.setter
    def value(self, new_value: float) -> None: ...


class TagFloat(TagDouble):
    tagid: int = ...


class _TagNumberArray(Tag):
    def __init__(self, numbers: Iterable[int]) -> None: ...

    @property
    def value(self) -> array[int]: ...

    @value.setter
    def value(self, new_value: array[int]) -> None: ...


class TagByteArray(_TagNumberArray):
    tagid: int = ...


class TagIntArray(_TagNumberArray):
    tagid: int = ...


class TagLongArray(_TagNumberArray):
    tagid: int = ...


class TagString(Tag):
    tagid: int = ...

    def __init__(self, value: str = '') -> None: ...

    @property
    def value(self) -> str: ...

    @value.setter
    def value(self, new_value: str) -> None: ...


class TagList(Tag, abc.MutableSequence[T]):
    tagid: int = ...

    item_cls: Type[T] = ...

    def __init__(self, item_cls: Type[T], items: Optional[Iterable[T]] = None) -> None: ...

    @property
    def value(self) -> List[T]: ...

    @value.setter
    def value(self, new_value: Iterable[T]) -> None: ...
    
    def __len__(self) -> int: ...

    @overload
    def __getitem__(self, index: int) -> T: ...

    @overload
    def __getitem__(self, index: slice) -> List[T]: ...

    @overload
    def __setitem__(self, index: int, tag: T) -> None: ...

    @overload
    def __setitem__(self, index: slice, tag: Iterable[T]) -> None: ...

    @overload
    def __delitem__(self, index: int) -> None: ...

    @overload
    def __delitem__(self, index: slice) -> None: ...

    def insert(self, index: int, tag: T) -> None: ...


class TagCompound(Tag, abc.MutableMapping[str, Tag]):
    tagid: int = ...

    def __init__(self, mapping: Optional[Dict[str, Tag]] = None) -> None: ...

    @property
    def value(self) -> Dict[str, Tag]: ...

    @value.setter
    def value(self, new_value: Dict[str, Tag]) -> None: ...

    def __len__(self) -> int: ...

    def __getitem__(self, key: str) -> Tag: ...

    def __setitem__(self, key: str, tag: Tag) -> None: ...
    
    def __delitem__(self, key: str) -> None: ...
    
    def __iter__(self) -> Iterator[str]: ...


def read_nbt_file(file: Union[str, BinaryIO], *, with_name: bool = False) -> Union[TagCompound, Tuple[TagCompound, str]]: ...

def write_nbt_file(file: Union[str, BinaryIO], root: TagCompound, *, root_name: str = '', compress: bool = True) -> None: ...
